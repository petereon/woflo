[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool]

[tool.black]
line-length = 140
skip-string-normalization = true
extend-exclude = "(.venv)"

[tool.coverage.run]
omit = ['*test*']

[tool.flake8]
ignore = ["E203", "E266", "E501", "W503", "F403", "F401"]
max-line-length = 140
max-complexity = 18
select = ["B","C","E","F","W","T4","B9"]
exclude = ['.venv']

[tool.isort]
profile = "black"

[tool.mypy]
exclude = [
    "^.*test.*\\.py$",  # excluding test files
]
error_summary = true
warn_return_any = true
warn_no_return = true
warn_unused_configs = true
warn_redundant_casts = true
warn_unreachable = true
warn_unused_ignores = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
show_column_numbers = true
show_error_context = true
ignore_missing_imports = true

[tool.poe]
verbosity = -1

[tool.poe.tasks]
add = { shell = "poetry add" }
install = { shell = "poetry install" }
build = { shell = "poetry build" }
isort = { shell = "poetry run isort ./" }
toml-sort = {shell = "poetry run toml-sort -i ./*.toml"}
black = { shell = "poetry run black ./" }
mypy = { shell = "poetry run mypy ./" }
flake8 = {shell = "poetry run pflake8 ./"}
perflint = { shell = "poetry run perflint ./src/" }
lint = { shell = """echo 'Running toml-sort ..' ; poetry run poe toml-sort ;
                    echo 'Running isort...' ; poetry run poe isort ;
                    echo 'Running black...' ; poetry run poe black ;
                    echo "Running unify..." ; poetry run unify ./ -r -i ;
                    echo 'Running mypy...' ; poetry run poe mypy ;
                    echo 'Running flake8...' ; poetry run poe flake8"""}
"lint:watch" = {shell = "poetry run poe lint; poetry run watchmedo shell-command --patterns='*.py;*.feature;*.toml' --recursive --drop --command='echo \"\nDetected changes, rerunning...\n\" ; poetry run poe lint'"}
test = { shell = "poetry run ward" }
"test:watch" = { shell = "poetry run ward; poetry run watchmedo shell-command --patterns='*.py;*.feature;*.toml' --recursive --drop --command='poetry run ward'" }
docs = { shell = "poetry run pydoc-markdown > APIDOC.md"}
install-self = { shell = "poetry run pip install ./dist/$(ls ./dist | grep .whl | tail -n 1) --force-reinstall" }
uninstall-self = { shell = "poetry run pip uninstall woflo" }

[tool.poetry]
name = "woflo"
version = "0.8.0"
description = "Python local-first no-bloat task orchestration framework "
authors = ["Peter Vyboch <pvyboch1@gmail.com>"]
license = "MIT"
repository = 'https://github.com/petereon/woflo'
readme = 'README.md'
keywords = ["python"]
classifiers = ['License :: OSI Approved :: MIT License', 'Programming Language :: Python :: 3']
packages = [{ include = "woflo", from = "src" }]

[tool.poetry.dependencies]
python = "^3.7.8"
multiprocess = "^0.70.13"

[tool.poetry.dev-dependencies]
black = { version = "*", allow-prereleases = true }
mypy = "^0.942"
pyproject-flake8 = "*"
flake8 = "<5"
flake8-bugbear = "^22.7.1"
flake8-simplify = "^0.19.2"
flake8-pie = "^0.15.0"
flake8-bandit = "^3.0.0"
flake8-cognitive-complexity = "^0.1.0"
flake8-expression-complexity = "^0.0.11"
radon = "^5.1.0"
xenon = "^0.9.0"
flake8-quotes = "^3.3.1"
flake8-print = "^5.0.0"
flake8-eradicate = "^1.2.1"
flake8-comments = "^0.1.2"
toml-sort = "*"
isort = "*"
unify = "*"
perflint = "^0.7.3"
expycted = "^0.5.0"
ward = "^0.66.1-beta.0"
mock = "4.0.3"
mutatest = "*"
watchdog = "^2.1.9"
ward-coverage = "^0.1.4"
poethepoet = "*"
pydoc-markdown = "^4.6.3"
pre-commit = "*"
detect-secrets = "^1.2.0"
types-mock = "^4.0.15"

[[tool.pydoc-markdown.loaders]]
type = 'python'
search_path = ['./beaupy']

[tool.pydoc-markdown.renderer]
type = 'markdown'

[tool.ward]
hook_module = ["ward_coverage"]
